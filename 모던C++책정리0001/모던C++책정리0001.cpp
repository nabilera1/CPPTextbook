/*

작성 중인 책 제목 : 모던 C++ 입문

C++ 기초 문법
절차 지향
객체 지향
제네릭
메타 프로그래밍
동시성 프로그래밍

엔지니어
프로그래머를 위한 C++11/14입문


저자 : 피터 고츠슐링

C++를 사용해 PC, 서버, 임베디드 뿐만 아니라 안드로이드, iOS 앱도 개발 가능
특히 게임 개발에 있어서 C++ 빼놓고 이야기하기 힘들다.

C++ 멀티 패러다임 언어
멀티 패러다임 언어는 하나 이상의 프로그래밍 스타일을 따르는 프로그래밍 언어
C++ 제대로 다룰 줄 안다면 다른 언어도 굉장히 쉽게 배울 수 있다.

한동안 C++는 2003년에 제정한 C++03 표준 이후로 새로운 표준을 만들지 않다가
2011년 모던 C++라는 이름 아래 3년마다 새로운 표준 C++11, C++14, C++17을 제정하고 있다.

C++에 있는 모든 내용을 한 번에 배울 수는 없다. 
반드시 알아야 할 기본 지식부터 배우면서 조금씩 지식의 깊이를 더해 가야 한다.


세상은 C++를 기반으로 한다. 
- 허브 서터(Herb Sutter)

구글, 아마존, 페이스북은 광범위한 인프라를 C++로 구축한다. 
통신 분야에서는 C++ 소프트웨어가 거의 모든 유선 전화와 휴대 전화 연결을 주도한다.
독일의 모든 주요 전송 노드가 C++로 처리된다.
Visual Studio, Clang, GNU와 Intel 컴파일러의 새로운 부분 등
가장 널리 사용되는 컴파일러들을 C++로 구현했기 때문에
다른 프로그래밍 언어로 작성된 소프트웨어도 C++에 의존한다.

과학과 공학 분야에서도 많은 고품질 소프트웨어 패키지가 C++로 만들어진다.
특히 C++ 언어의 강점은 프로젝트 규모가 커지고 자료 구조가 다소 복잡할 때 나타난다.
Abaqus, deal, II, FeniCs, OpenFOAM, CATIA 등 과학과 공학 분야의 많은 시뮬레이션
소프트웨어 프로그램들은 C++로 만들어졌다.

C 대신 C++로 구현될 프로젝트가 얼마나 많은지 알지 못한다.
잘 알려진 과학 라이브러리인 PETSc의 공동 제작자이면서 저자의 좋은 친구 Matt Knepley는
재작성이 가능하다면 라이브러리를 오늘 당장 C++로 프로그래밍할 것이라고 인정했다.

C++을 배워야 하는 이유

C++는 다른 언어와는 달리 하드웨어 친화적인 프로그래밍부터 
추상적인 고급 프로그래밍까지 스펙트럼이 넓다.
사용자가 정의할 수 있는 메모리 관리 같은 저수준 프로그래밍은 프로그래머가
실행 중에 실제로 일어나는 일을 이해할 수 있게 해주며
다른 언어로 된 프로그램의 동작을 이해하는 데도 도움이 된다.

C++를 사용하면 피나는 노력을 통해 작성한 기계어 코드와 
성능 차이가 그다지 나지 않는다.

객체 지향 프로그래밍
제네릭 프로그래밍
메타 프로그래밍
동시성 프로그래밍
절차적 프로그래밍과 같은 다양한 프로그래밍 패러다임을 제공한다.

"모든 종류의 수치 소프트웨어가 효율성을 잃지 않으면서 C++로 작성될 수 있다면
좋겠지만 C++ 타입 시스템을 손상하지 않으면서 달성할 방법이 발견되지 않는다면
포트란, 어셈블러 또는 아키텍처 특정 확장에 의존하는 방법이 더 바람직할 수 있다."
-Bjarne Strousstrup

과학 및 공학 소프트웨어



MATLAB, Mathematica, R과 같은 수학 도구는 기존 알고리즘을 사용할 수 있을 때 탁월하다.
자체 알고리즘을 구현하면 성능이 크게 저하된다.

파이썬은 소프트웨어를 빠르게 개발해야 할 때 뛰어나다.
scipy numpy 같은 과학라이브러리를 포함하고 있다.

포트란은 조밀한 행렬 연산과 같은 기존의 잘 조율된 연산에 의존할 수 있다.





*/